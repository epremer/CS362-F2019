        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 1190 returned 100% blocks executed 85%
     1190:    8:int compare(const void* a, const void* b) {
     1190:    9:    if (*(int*)a > *(int*)b)
branch  0 taken 0%
branch  1 taken 100%
    #####:   10:        return 1;
     1190:   11:    if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
      425:   12:        return -1;
      765:   13:    return 0;
     1190:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:    struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:    return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:                  int k8, int k9, int k10) {
    #####:   23:    int* k = malloc(10 * sizeof(int));
    #####:   24:    k[0] = k1;
    #####:   25:    k[1] = k2;
    #####:   26:    k[2] = k3;
    #####:   27:    k[3] = k4;
    #####:   28:    k[4] = k5;
    #####:   29:    k[5] = k6;
    #####:   30:    k[6] = k7;
    #####:   31:    k[7] = k8;
    #####:   32:    k[8] = k9;
    #####:   33:    k[9] = k10;
    #####:   34:    return k;
        -:   35:}
        -:   36:
function initializeGame called 45 returned 100% blocks executed 95%
       45:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:                   struct gameState *state) {
        -:   39:    int i;
        -:   40:    int j;
        -:   41:    int it;
        -:   42:
        -:   43:    //set up random number generator
       45:   44:    SelectStream(1);
       45:   45:    PutSeed((long)randomSeed);
        -:   46:
        -:   47:    //check number of players
       45:   48:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   49:    {
    #####:   50:        return -1;
        -:   51:    }
        -:   52:
        -:   53:    //set number of players
       45:   54:    state->numPlayers = numPlayers;
        -:   55:
        -:   56:    //check selected kingdom cards are different
      471:   57:    for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   58:    {
     4698:   59:        for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:        {
     4272:   61:            if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 1%
branch  3 taken 99%
        -:   62:            {
        3:   63:                return -1;
        -:   64:            }
     4269:   65:        }
      426:   66:    }
        -:   67:
        -:   68:
        -:   69:    //initialize supply
        -:   70:    ///////////////////////////////
        -:   71:
        -:   72:    //set number of Curse cards
       42:   73:    if (numPlayers == 2)
branch  0 taken 98%
branch  1 taken 2%
        -:   74:    {
       41:   75:        state->supplyCount[curse] = 10;
       41:   76:    }
        1:   77:    else if (numPlayers == 3)
branch  0 taken 100%
branch  1 taken 0%
        -:   78:    {
        1:   79:        state->supplyCount[curse] = 20;
        1:   80:    }
        -:   81:    else
        -:   82:    {
    #####:   83:        state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:    //set number of Victory cards
       42:   87:    if (numPlayers == 2)
branch  0 taken 98%
branch  1 taken 2%
        -:   88:    {
       41:   89:        state->supplyCount[estate] = 8;
       41:   90:        state->supplyCount[duchy] = 8;
       41:   91:        state->supplyCount[province] = 8;
       41:   92:    }
        -:   93:    else
        -:   94:    {
        1:   95:        state->supplyCount[estate] = 12;
        1:   96:        state->supplyCount[duchy] = 12;
        1:   97:        state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:    //set number of Treasure cards
       42:  101:    state->supplyCount[copper] = 60 - (7 * numPlayers);
       42:  102:    state->supplyCount[silver] = 40;
       42:  103:    state->supplyCount[gold] = 30;
        -:  104:
        -:  105:    //set number of Kingdom cards
      882:  106:    for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  107:    {
     7050:  108:        for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  109:        {
     6600:  110:            if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  111:            {
        -:  112:                //check if card is a 'Victory' Kingdom card
      390:  113:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 2%
branch  3 taken 98%
        -:  114:                {
       46:  115:                    if (numPlayers == 2) {
branch  0 taken 96%
branch  1 taken 4%
       44:  116:                        state->supplyCount[i] = 8;
       44:  117:                    }
        -:  118:                    else {
        2:  119:                        state->supplyCount[i] = 12;
        -:  120:                    }
       46:  121:                }
        -:  122:                else
        -:  123:                {
      344:  124:                    state->supplyCount[i] = 10;
        -:  125:                }
      390:  126:                break;
        -:  127:            }
        -:  128:            else    //card is not in the set choosen for the game
        -:  129:            {
     6210:  130:                state->supplyCount[i] = -1;
        -:  131:            }
     6210:  132:        }
        -:  133:
      840:  134:    }
        -:  135:
        -:  136:    ////////////////////////
        -:  137:    //supply intilization complete
        -:  138:
        -:  139:    //set player decks
      127:  140:    for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  141:    {
       85:  142:        state->deckCount[i] = 0;
      340:  143:        for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  144:        {
      255:  145:            state->deck[i][j] = estate;
      255:  146:            state->deckCount[i]++;
      255:  147:        }
      680:  148:        for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  149:        {
      595:  150:            state->deck[i][j] = copper;
      595:  151:            state->deckCount[i]++;
      595:  152:        }
       85:  153:    }
        -:  154:
        -:  155:    //shuffle player decks
      127:  156:    for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  157:    {
       85:  158:        if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  159:        {
    #####:  160:            return -1;
        -:  161:        }
       85:  162:    }
        -:  163:
        -:  164:    //draw player hands
      127:  165:    for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  166:    {
        -:  167:        //initialize hand size to zero
       85:  168:        state->handCount[i] = 0;
       85:  169:        state->discardCount[i] = 0;
        -:  170:        //draw 5 cards
        -:  171:        // for (j = 0; j < 5; j++)
        -:  172:        //	{
        -:  173:        //	  drawCard(i, state);
        -:  174:        //	}
       85:  175:    }
        -:  176:
        -:  177:    //set embargo tokens to 0 for all supply piles
     1176:  178:    for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  179:    {
     1134:  180:        state->embargoTokens[i] = 0;
     1134:  181:    }
        -:  182:
        -:  183:    //initialize first player's turn
       42:  184:    state->outpostPlayed = 0;
       42:  185:    state->phase = 0;
       42:  186:    state->numActions = 1;
       42:  187:    state->numBuys = 1;
       42:  188:    state->playedCardCount = 0;
       42:  189:    state->whoseTurn = 0;
       42:  190:    state->handCount[state->whoseTurn] = 0;
        -:  191:    //int it; move to top
        -:  192:
        -:  193:    //Moved draw cards to here, only drawing at the start of a turn
      252:  194:    for (it = 0; it < 5; it++) {
branch  0 taken 83%
branch  1 taken 17%
      210:  195:        drawCard(state->whoseTurn, state);
      210:  196:    }
        -:  197:
       42:  198:    updateCoins(state->whoseTurn, state, 0);
        -:  199:
       42:  200:    return 0;
       45:  201:}
        -:  202:
function shuffle called 85 returned 100% blocks executed 93%
       85:  203:int shuffle(int player, struct gameState *state) {
        -:  204:
        -:  205:
        -:  206:    int newDeck[MAX_DECK];
       85:  207:    int newDeckPos = 0;
        -:  208:    int card;
        -:  209:    int i;
        -:  210:
       85:  211:    if (state->deckCount[player] < 1)
branch  0 taken 0%
branch  1 taken 100%
    #####:  212:        return -1;
       85:  213:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  214:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
      935:  216:    while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
      850:  217:        card = floor(Random() * state->deckCount[player]);
      850:  218:        newDeck[newDeckPos] = state->deck[player][card];
      850:  219:        newDeckPos++;
     2975:  220:        for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29%
     2125:  221:            state->deck[player][i] = state->deck[player][i+1];
     2125:  222:        }
      850:  223:        state->deckCount[player]--;
        -:  224:    }
      935:  225:    for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
      850:  226:        state->deck[player][i] = newDeck[i];
      850:  227:        state->deckCount[player]++;
      850:  228:    }
        -:  229:
       85:  230:    return 0;
       85:  231:}
        -:  232:
function playCard called 0 returned 0% blocks executed 0%
    #####:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  234:{
        -:  235:    int card;
    #####:  236:    int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:    //check if it is the right phase
    #####:  239:    if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  240:    {
    #####:  241:        return -1;
        -:  242:    }
        -:  243:
        -:  244:    //check if player has enough actions
    #####:  245:    if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  246:    {
    #####:  247:        return -1;
        -:  248:    }
        -:  249:
        -:  250:    //get card played
    #####:  251:    card = handCard(handPos, state);
        -:  252:
        -:  253:    //check if selected card is an action
    #####:  254:    if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  255:    {
    #####:  256:        return -1;
        -:  257:    }
        -:  258:
        -:  259:    //play card
    #####:  260:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  261:    {
    #####:  262:        return -1;
        -:  263:    }
        -:  264:
        -:  265:    //reduce number of actions
    #####:  266:    state->numActions--;
        -:  267:
        -:  268:    //update coins (Treasure cards may be added with card draws)
    #####:  269:    updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:
    #####:  271:    return 0;
    #####:  272:}
        -:  273:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:    int who;
        -:  276:    if (DEBUG) {
        -:  277:        printf("Entering buyCard...\n");
        -:  278:    }
        -:  279:
        -:  280:    // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:    who = state->whoseTurn;
        -:  283:
    #####:  284:    if (state->numBuys < 1) {
branch  0 never executed
branch  1 never executed
        -:  285:        if (DEBUG)
        -:  286:            printf("You do not have any buys left\n");
    #####:  287:        return -1;
    #####:  288:    } else if (supplyCount(supplyPos, state) <1) {
branch  0 never executed
branch  1 never executed
        -:  289:        if (DEBUG)
        -:  290:            printf("There are not any of that type of card left\n");
    #####:  291:        return -1;
    #####:  292:    } else if (state->coins < getCost(supplyPos)) {
branch  0 never executed
branch  1 never executed
        -:  293:        if (DEBUG)
        -:  294:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:        return -1;
        -:  296:    } else {
    #####:  297:        state->phase=1;
        -:  298:        //state->supplyCount[supplyPos]--;
    #####:  299:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  300:
    #####:  301:        state->coins = (state->coins) - (getCost(supplyPos));
    #####:  302:        state->numBuys--;
        -:  303:        if (DEBUG)
        -:  304:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:    }
        -:  306:
        -:  307:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:    //state->discardCount[who]++;
        -:  309:
    #####:  310:    return 0;
    #####:  311:}
        -:  312:
function numHandCards called 2 returned 100% blocks executed 100%
        2:  313:int numHandCards(struct gameState *state) {
        2:  314:    return state->handCount[ whoseTurn(state) ];
        -:  315:}
        -:  316:
function handCard called 0 returned 0% blocks executed 0%
    #####:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:    int currentPlayer = whoseTurn(state);
    #####:  319:    return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
function supplyCount called 6 returned 100% blocks executed 100%
        6:  322:int supplyCount(int card, struct gameState *state) {
        6:  323:    return state->supplyCount[card];
        -:  324:}
        -:  325:
function fullDeckCount called 3 returned 100% blocks executed 100%
        3:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:    int i;
        3:  328:    int count = 0;
        -:  329:
       48:  330:    for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 94%
branch  1 taken 6%
        -:  331:    {
       45:  332:        if (state->deck[player][i] == card) count++;
branch  0 taken 20%
branch  1 taken 80%
       45:  333:    }
        -:  334:
       21:  335:    for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 86%
branch  1 taken 14%
        -:  336:    {
       18:  337:        if (state->hand[player][i] == card) count++;
branch  0 taken 17%
branch  1 taken 83%
       18:  338:    }
        -:  339:
       33:  340:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:  341:    {
       30:  342:        if (state->discard[player][i] == card) count++;
branch  0 taken 20%
branch  1 taken 80%
       30:  343:    }
        -:  344:
        3:  345:    return count;
        -:  346:}
        -:  347:
function whoseTurn called 47 returned 100% blocks executed 100%
       47:  348:int whoseTurn(struct gameState *state) {
       47:  349:    return state->whoseTurn;
        -:  350:}
        -:  351:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  352:int endTurn(struct gameState *state) {
        -:  353:    int k;
        -:  354:    int i;
    #####:  355:    int currentPlayer = whoseTurn(state);
        -:  356:
        -:  357:    //Discard hand
    #####:  358:    for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  359:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:        state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  361:    }
    #####:  362:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:
        -:  364:    //Code for determining the player
    #####:  365:    if (currentPlayer < (state->numPlayers - 1)) {
branch  0 never executed
branch  1 never executed
    #####:  366:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  367:    }
        -:  368:    else {
    #####:  369:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:    }
        -:  371:
    #####:  372:    state->outpostPlayed = 0;
    #####:  373:    state->phase = 0;
    #####:  374:    state->numActions = 1;
    #####:  375:    state->coins = 0;
    #####:  376:    state->numBuys = 1;
    #####:  377:    state->playedCardCount = 0;
    #####:  378:    state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:    //int k; move to top
        -:  381:    //Next player draws hand
    #####:  382:    for (k = 0; k < 5; k++) {
branch  0 never executed
branch  1 never executed
    #####:  383:        drawCard(state->whoseTurn, state);//Draw a card
    #####:  384:    }
        -:  385:
        -:  386:    //Update money
    #####:  387:    updateCoins(state->whoseTurn, state, 0);
        -:  388:
    #####:  389:    return 0;
        -:  390:}
        -:  391:
function isGameOver called 3 returned 100% blocks executed 84%
        3:  392:int isGameOver(struct gameState *state) {
        -:  393:    int i;
        -:  394:    int j;
        -:  395:
        -:  396:    //if stack of Province cards is empty, the game ends
        3:  397:    if (state->supplyCount[province] == 0)
branch  0 taken 0%
branch  1 taken 100%
        -:  398:    {
    #####:  399:        return 1;
        -:  400:    }
        -:  401:
        -:  402:    //if three supply pile are at 0, the game ends
        3:  403:    j = 0;
       84:  404:    for (i = 0; i < 27; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  405:    {
       81:  406:        if (state->supplyCount[i] == 0)
branch  0 taken 11%
branch  1 taken 89%
        -:  407:        {
        9:  408:            j++;
        9:  409:        }
       81:  410:    }
        3:  411:    if ( j >= 3)
branch  0 taken 100%
branch  1 taken 0%
        -:  412:    {
        3:  413:        return 1;
        -:  414:    }
        -:  415:
    #####:  416:    return 0;
        3:  417:}
        -:  418:
function scoreFor called 1 returned 100% blocks executed 100%
        1:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:    int i;
        1:  422:    int score = 0;
        -:  423:    //score from hand
        7:  424:    for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 86%
branch  1 taken 14%
        -:  425:    {
        6:  426:        if (state->hand[player][i] == curse) {
branch  0 taken 17%
branch  1 taken 83%
        1:  427:            score = score - 1;
        1:  428:        };
        6:  429:        if (state->hand[player][i] == estate) {
branch  0 taken 17%
branch  1 taken 83%
        1:  430:            score = score + 1;
        1:  431:        };
        6:  432:        if (state->hand[player][i] == duchy) {
branch  0 taken 17%
branch  1 taken 83%
        1:  433:            score = score + 3;
        1:  434:        };
        6:  435:        if (state->hand[player][i] == province) {
branch  0 taken 17%
branch  1 taken 83%
        1:  436:            score = score + 6;
        1:  437:        };
        6:  438:        if (state->hand[player][i] == great_hall) {
branch  0 taken 17%
branch  1 taken 83%
        1:  439:            score = score + 1;
        1:  440:        };
        6:  441:        if (state->hand[player][i] == gardens) {
branch  0 taken 17%
branch  1 taken 83%
        1:  442:            score = score + ( fullDeckCount(player, 0, state) / 10 );
        1:  443:        };
        6:  444:    }
        -:  445:
        -:  446:    //score from discard
       11:  447:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:  448:    {
       10:  449:        if (state->discard[player][i] == curse) {
branch  0 taken 20%
branch  1 taken 80%
        2:  450:            score = score - 1;
        2:  451:        };
       10:  452:        if (state->discard[player][i] == estate) {
branch  0 taken 20%
branch  1 taken 80%
        2:  453:            score = score + 1;
        2:  454:        };
       10:  455:        if (state->discard[player][i] == duchy) {
branch  0 taken 20%
branch  1 taken 80%
        2:  456:            score = score + 3;
        2:  457:        };
       10:  458:        if (state->discard[player][i] == province) {
branch  0 taken 20%
branch  1 taken 80%
        2:  459:            score = score + 6;
        2:  460:        };
       10:  461:        if (state->discard[player][i] == great_hall) {
branch  0 taken 10%
branch  1 taken 90%
        1:  462:            score = score + 1;
        1:  463:        };
       10:  464:        if (state->discard[player][i] == gardens) {
branch  0 taken 10%
branch  1 taken 90%
        1:  465:            score = score + ( fullDeckCount(player, 0, state) / 10 );
        1:  466:        };
       10:  467:    }
        -:  468:
        -:  469:    //score from deck
       16:  470:    for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 94%
branch  1 taken 6%
        -:  471:    {
       15:  472:        if (state->deck[player][i] == curse) {
branch  0 taken 20%
branch  1 taken 80%
        3:  473:            score = score - 1;
        3:  474:        };
       15:  475:        if (state->deck[player][i] == estate) {
branch  0 taken 20%
branch  1 taken 80%
        3:  476:            score = score + 1;
        3:  477:        };
       15:  478:        if (state->deck[player][i] == duchy) {
branch  0 taken 27%
branch  1 taken 73%
        4:  479:            score = score + 3;
        4:  480:        };
       15:  481:        if (state->deck[player][i] == province) {
branch  0 taken 20%
branch  1 taken 80%
        3:  482:            score = score + 6;
        3:  483:        };
       15:  484:        if (state->deck[player][i] == great_hall) {
branch  0 taken 7%
branch  1 taken 93%
        1:  485:            score = score + 1;
        1:  486:        };
       15:  487:        if (state->deck[player][i] == gardens) {
branch  0 taken 7%
branch  1 taken 93%
        1:  488:            score = score + ( fullDeckCount(player, 0, state) / 10 );
        1:  489:        };
       15:  490:    }
        -:  491:
        1:  492:    return score;
        -:  493:}
        -:  494:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  495:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  496:    int i;
        -:  497:    int j;
        -:  498:    int highScore;
        -:  499:    int currentPlayer;
        -:  500:
        -:  501:    //get score for each player
    #####:  502:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  503:    {
        -:  504:        //set unused player scores to -9999
    #####:  505:        if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  506:        {
    #####:  507:            players[i] = -9999;
    #####:  508:        }
        -:  509:        else
        -:  510:        {
    #####:  511:            players[i] = scoreFor (i, state);
        -:  512:        }
    #####:  513:    }
        -:  514:
        -:  515:    //find highest score
    #####:  516:    j = 0;
    #####:  517:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  518:    {
    #####:  519:        if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  520:        {
    #####:  521:            j = i;
    #####:  522:        }
    #####:  523:    }
    #####:  524:    highScore = players[j];
        -:  525:
        -:  526:    //add 1 to players who had less turns
    #####:  527:    currentPlayer = whoseTurn(state);
    #####:  528:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  529:    {
    #####:  530:        if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  531:        {
    #####:  532:            players[i]++;
    #####:  533:        }
    #####:  534:    }
        -:  535:
        -:  536:    //find new highest score
    #####:  537:    j = 0;
    #####:  538:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  539:    {
    #####:  540:        if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  541:        {
    #####:  542:            j = i;
    #####:  543:        }
    #####:  544:    }
    #####:  545:    highScore = players[j];
        -:  546:
        -:  547:    //set winners in array to 1 and rest to 0
    #####:  548:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  549:    {
    #####:  550:        if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  551:        {
    #####:  552:            players[i] = 1;
    #####:  553:        }
        -:  554:        else
        -:  555:        {
    #####:  556:            players[i] = 0;
        -:  557:        }
    #####:  558:    }
        -:  559:
    #####:  560:    return 0;
        -:  561:}
        -:  562:
function drawCard called 244 returned 100% blocks executed 41%
      244:  563:int drawCard(int player, struct gameState *state)
        -:  564:{   int count;
        -:  565:    int deckCounter;
      244:  566:    if (state->deckCount[player] <= 0) { //Deck is empty
branch  0 taken 0%
branch  1 taken 100%
        -:  567:
        -:  568:        //Step 1 Shuffle the discard pile back into a deck
        -:  569:        int i;
        -:  570:        //Move discard to deck
    #####:  571:        for (i = 0; i < state->discardCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  572:            state->deck[player][i] = state->discard[player][i];
    #####:  573:            state->discard[player][i] = -1;
    #####:  574:        }
        -:  575:
    #####:  576:        state->deckCount[player] = state->discardCount[player];
    #####:  577:        state->discardCount[player] = 0;//Reset discard
        -:  578:
        -:  579:        //Shufffle the deck
    #####:  580:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  581:
        -:  582:        if (DEBUG) { //Debug statements
        -:  583:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  584:        }
        -:  585:
    #####:  586:        state->discardCount[player] = 0;
        -:  587:
        -:  588:        //Step 2 Draw Card
    #####:  589:        count = state->handCount[player];//Get current player's hand count
        -:  590:
        -:  591:        if (DEBUG) { //Debug statements
        -:  592:            printf("Current hand count: %d\n", count);
        -:  593:        }
        -:  594:
    #####:  595:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  596:
    #####:  597:        if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  598:            return -1;
        -:  599:
    #####:  600:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  601:        state->deckCount[player]--;
    #####:  602:        state->handCount[player]++;//Increment hand count
    #####:  603:    }
        -:  604:
        -:  605:    else {
      244:  606:        int count = state->handCount[player];//Get current hand count for player
        -:  607:        int deckCounter;
        -:  608:        if (DEBUG) { //Debug statements
        -:  609:            printf("Current hand count: %d\n", count);
        -:  610:        }
        -:  611:
      244:  612:        deckCounter = state->deckCount[player];//Create holder for the deck count
      244:  613:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      244:  614:        state->deckCount[player]--;
      244:  615:        state->handCount[player]++;//Increment hand count
        -:  616:    }
        -:  617:
      244:  618:    return 0;
      244:  619:}
        -:  620:
function getCost called 15 returned 100% blocks executed 32%
       15:  621:int getCost(int cardNumber)
        -:  622:{
       15:  623:    switch( cardNumber )
branch  0 taken 0%
branch  1 taken 7%
branch  2 taken 0%
branch  3 taken 7%
branch  4 taken 33%
branch  5 taken 13%
branch  6 taken 27%
branch  7 taken 0%
branch  8 taken 7%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 7%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  624:    {
        -:  625:    case curse:
    #####:  626:        return 0;
        -:  627:    case estate:
        1:  628:        return 2;
        -:  629:    case duchy:
    #####:  630:        return 5;
        -:  631:    case province:
        1:  632:        return 8;
        -:  633:    case copper:
        5:  634:        return 0;
        -:  635:    case silver:
        2:  636:        return 3;
        -:  637:    case gold:
        4:  638:        return 6;
        -:  639:    case adventurer:
    #####:  640:        return 6;
        -:  641:    case council_room:
        1:  642:        return 5;
        -:  643:    case feast:
    #####:  644:        return 4;
        -:  645:    case gardens:
    #####:  646:        return 4;
        -:  647:    case mine:
    #####:  648:        return 5;
        -:  649:    case remodel:
    #####:  650:        return 4;
        -:  651:    case smithy:
    #####:  652:        return 4;
        -:  653:    case village:
    #####:  654:        return 3;
        -:  655:    case baron:
    #####:  656:        return 4;
        -:  657:    case great_hall:
        1:  658:        return 3;
        -:  659:    case minion:
    #####:  660:        return 5;
        -:  661:    case steward:
    #####:  662:        return 3;
        -:  663:    case tribute:
    #####:  664:        return 5;
        -:  665:    case ambassador:
    #####:  666:        return 3;
        -:  667:    case cutpurse:
    #####:  668:        return 4;
        -:  669:    case embargo:
    #####:  670:        return 2;
        -:  671:    case outpost:
    #####:  672:        return 5;
        -:  673:    case salvager:
    #####:  674:        return 4;
        -:  675:    case sea_hag:
    #####:  676:        return 4;
        -:  677:    case treasure_map:
    #####:  678:        return 4;
        -:  679:    }
        -:  680:
    #####:  681:    return -1;
       15:  682:}
        -:  683:
function cardEffect called 45 returned 100% blocks executed 32%
       45:  684:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  685:{
        -:  686:    int i;
        -:  687:    int j;
        -:  688:    int k;
        -:  689:    int x;
        -:  690:    int index;
       45:  691:    int currentPlayer = whoseTurn(state);
       45:  692:    int nextPlayer = currentPlayer + 1;
        -:  693:
       45:  694:    int tributeRevealedCards[2] = {-1, -1};
        -:  695:    int temphand[MAX_HAND];// moved above the if statement
       45:  696:    int drawntreasure=0;
        -:  697:    int cardDrawn;
       45:  698:    int z = 0;// this is the counter for the temp hand
       45:  699:    if (nextPlayer > (state->numPlayers - 1)) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  700:        nextPlayer = 0;
    #####:  701:    }
        -:  702:
        -:  703:
        -:  704:    //uses switch to select card and perform actions
       45:  705:    switch( card )
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 7%
branch  3 taken 0%
branch  4 taken 9%
branch  5 taken 4%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 2%
branch  9 taken 0%
branch 10 taken 4%
branch 11 taken 0%
branch 12 taken 71%
branch 13 taken 2%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  706:    {
        -:  707:    case adventurer:
    #####:  708:        while(drawntreasure<2) {
branch  0 never executed
branch  1 never executed
    #####:  709:            if (state->deckCount[currentPlayer] <1) { //if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  710:                shuffle(currentPlayer, state);
    #####:  711:            }
    #####:  712:            drawCard(currentPlayer, state);
    #####:  713:            cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  714:            if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  715:                drawntreasure++;
        -:  716:            else {
    #####:  717:                temphand[z]=cardDrawn;
    #####:  718:                state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  719:                z++;
        -:  720:            }
        -:  721:        }
    #####:  722:        while(z-1>=0) {
branch  0 never executed
branch  1 never executed
    #####:  723:            state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  724:            z=z-1;
        -:  725:        }
    #####:  726:        return 0;
        -:  727:
        -:  728:    case council_room:
        -:  729:        //+4 Cards
    #####:  730:        for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  731:        {
    #####:  732:            drawCard(currentPlayer, state);
    #####:  733:        }
        -:  734:
        -:  735:        //+1 Buy
    #####:  736:        state->numBuys++;
        -:  737:
        -:  738:        //Each other player draws a card
    #####:  739:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  740:        {
    #####:  741:            if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  742:            {
    #####:  743:                drawCard(i, state);
    #####:  744:            }
    #####:  745:        }
        -:  746:
        -:  747:        //put played card in played card pile
    #####:  748:        discardCard(handPos, currentPlayer, state, 0);
        -:  749:
    #####:  750:        return 0;
        -:  751:
        -:  752:    case feast:
        -:  753:        //gain card with cost up to 5
        -:  754:        //Backup hand
       21:  755:        for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 taken 86%
branch  1 taken 14%
       18:  756:            temphand[i] = state->hand[currentPlayer][i];//Backup card
       18:  757:            state->hand[currentPlayer][i] = -1;//Set to nothing
       18:  758:        }
        -:  759:        //Backup hand
        -:  760:
        -:  761:        //Update Coins for Buy
        -:  762:        //updateCoins(currentPlayer, state, 5);
        3:  763:        x = 1;//Condition to loop on
        5:  764:        while( x == 1) {//Buy one card
branch  0 taken 60%
branch  1 taken 40%
        3:  765:            if (supplyCount(choice1, state) <= 0) {
branch  0 taken 0%
branch  1 taken 100%
        -:  766:                if (DEBUG)
        -:  767:                    printf("None of that card left, sorry!\n");
        -:  768:
        -:  769:                if (DEBUG) {
        -:  770:                    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  771:                }
    #####:  772:		return -1;
        -:  773:            }
        3:  774:            else if (5 < getCost(choice1)) {
branch  0 taken 33%
branch  1 taken 67%
        1:  775:                printf("That card is too expensive!\n");
        -:  776:
        -:  777:                if (DEBUG) {
        -:  778:                    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  779:                }
        1:  780:		return -1;
        -:  781:            }
        -:  782:            else {
        -:  783:
        -:  784:                if (DEBUG) {
        -:  785:                    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  786:                }
        -:  787:
        2:  788:                gainCard(choice1, state, 0, currentPlayer);//Gain the card
        2:  789:                x = 0;//No more buying cards
        -:  790:
        -:  791:                if (DEBUG) {
        -:  792:                    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  793:                }
        -:  794:
        -:  795:            }
        -:  796:        }
        -:  797:
        -:  798:        //Reset Hand
       16:  799:        for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 taken 88%
branch  1 taken 13%
       14:  800:            state->hand[currentPlayer][i] = temphand[i];
       14:  801:            temphand[i] = -1;
       14:  802:        }
        -:  803:        //Reset Hand
        -:  804:
        2:  805:        return 0;
        -:  806:
        -:  807:    case gardens:
    #####:  808:        return -1;
        -:  809:
        -:  810:    case mine:
        4:  811:        j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  812:
        4:  813:        if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:  814:        {
    #####:  815:            return -1;
        -:  816:        }
        -:  817:
        4:  818:        if (choice2 > treasure_map || choice2 < curse)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:  819:        {
    #####:  820:            return -1;
        -:  821:        }
        -:  822:
        4:  823:        if ( (getCost(state->hand[currentPlayer][choice1]) + 3) < getCost(choice2) )
branch  0 taken 75%
branch  1 taken 25%
        -:  824:        {
        3:  825:            return -1;
        -:  826:        }
        -:  827:
        1:  828:        gainCard(choice2, state, 2, currentPlayer);
        -:  829:
        -:  830:        //discard card from hand
        1:  831:        discardCard(handPos, currentPlayer, state, 0);
        -:  832:
        -:  833:        //discard trashed card
        2:  834:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 100%
branch  1 taken 0%
        -:  835:        {
        2:  836:            if (state->hand[currentPlayer][i] == j)
branch  0 taken 50%
branch  1 taken 50%
        -:  837:            {
        1:  838:                discardCard(i, currentPlayer, state, 1);
        1:  839:                break;
        -:  840:            }
        1:  841:        }
        -:  842:
        1:  843:        return 0;
        -:  844:
        -:  845:    case remodel:
        2:  846:        j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  847:
        2:  848:        if ( (getCost(state->hand[currentPlayer][choice1]) + 2) < getCost(choice2) )
branch  0 taken 100%
branch  1 taken 0%
        -:  849:        {
        2:  850:            return -1;
        -:  851:        }
        -:  852:
    #####:  853:        gainCard(choice2, state, 0, currentPlayer);
        -:  854:
        -:  855:        //discard card from hand
    #####:  856:        discardCard(handPos, currentPlayer, state, 0);
        -:  857:
        -:  858:        //discard trashed card
    #####:  859:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  860:        {
    #####:  861:            if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  862:            {
    #####:  863:                discardCard(i, currentPlayer, state, 0);
    #####:  864:                break;
        -:  865:            }
    #####:  866:        }
        -:  867:
        -:  868:
    #####:  869:        return 0;
        -:  870:
        -:  871:    case smithy:
        -:  872:        //+3 Cards
    #####:  873:        for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -:  874:        {
    #####:  875:            drawCard(currentPlayer, state);
    #####:  876:        }
        -:  877:
        -:  878:        //discard card from hand
    #####:  879:        discardCard(handPos, currentPlayer, state, 0);
    #####:  880:        return 0;
        -:  881:
        -:  882:    case village:
        -:  883:        //+1 Card
    #####:  884:        drawCard(currentPlayer, state);
        -:  885:
        -:  886:        //+2 Actions
    #####:  887:        state->numActions = state->numActions + 2;
        -:  888:
        -:  889:        //discard played card from hand
    #####:  890:        discardCard(handPos, currentPlayer, state, 0);
    #####:  891:        return 0;
        -:  892:
        -:  893:    case baron:
        1:  894:        state->numBuys++;//Increase buys by 1!
        1:  895:        if (choice1 > 0) { //Boolean true or going to discard an estate
branch  0 taken 100%
branch  1 taken 0%
        1:  896:            int p = 0;//Iterator for hand!
        1:  897:            int card_not_discarded = 1;//Flag for discard set!
        4:  898:            while(card_not_discarded) {
branch  0 taken 75%
branch  1 taken 25%
        3:  899:                if (state->hand[currentPlayer][p] == estate) { //Found an estate card!
branch  0 taken 33%
branch  1 taken 67%
        1:  900:                    bonus = 4;//Add 4 coins to the amount of coins
        1:  901:                    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
        1:  902:                    state->discardCount[currentPlayer]++;
        4:  903:                    for (; p < state->handCount[currentPlayer]; p++) {
branch  0 taken 75%
branch  1 taken 25%
        3:  904:                        state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        3:  905:                    }
        1:  906:                    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
        1:  907:                    state->handCount[currentPlayer]--;
        1:  908:                    card_not_discarded = 0;//Exit the loop
        1:  909:                }
        2:  910:                else if (p > state->handCount[currentPlayer]) {
branch  0 taken 0%
branch  1 taken 100%
        -:  911:                    if(DEBUG) {
        -:  912:                        printf("No estate cards in your hand, invalid choice\n");
        -:  913:                        printf("Must gain an estate if there are any\n");
        -:  914:                    }
    #####:  915:                    if (supplyCount(estate, state) > 0) {
branch  0 never executed
branch  1 never executed
    #####:  916:                        gainCard(estate, state, 0, currentPlayer);
        -:  917:
    #####:  918:                        state->supplyCount[estate]--;//Decrement estates
    #####:  919:                        if (supplyCount(estate, state) == 0) {
branch  0 never executed
branch  1 never executed
    #####:  920:                            isGameOver(state);
    #####:  921:                        }
    #####:  922:                    }
    #####:  923:                    card_not_discarded = 0;//Exit the loop
    #####:  924:                }
        -:  925:
        -:  926:                else {
        2:  927:                    p++;//Next card
        -:  928:                }
        -:  929:            }
        1:  930:        }
        -:  931:
        -:  932:        else {
    #####:  933:            if (supplyCount(estate, state) > 0) {
branch  0 never executed
branch  1 never executed
    #####:  934:                gainCard(estate, state, 0, currentPlayer);//Gain an estate
        -:  935:
    #####:  936:                state->supplyCount[estate]--;//Decrement Estates
    #####:  937:                if (supplyCount(estate, state) == 0) {
branch  0 never executed
branch  1 never executed
    #####:  938:                    isGameOver(state);
    #####:  939:                }
    #####:  940:            }
        -:  941:        }
        -:  942:
        -:  943:
        1:  944:        return 0;
        -:  945:
        -:  946:    case great_hall:
        -:  947:        //+1 Card
    #####:  948:        drawCard(currentPlayer, state);
        -:  949:
        -:  950:        //+1 Actions
    #####:  951:        state->numActions++;
        -:  952:
        -:  953:        //discard card from hand
    #####:  954:        discardCard(handPos, currentPlayer, state, 0);
    #####:  955:        return 0;
        -:  956:
        -:  957:    case minion:
        -:  958:        //+1 action
        2:  959:        state->numActions++;
        -:  960:
        -:  961:        //discard card from hand
        2:  962:        discardCard(handPos, currentPlayer, state, 0);
        -:  963:
        2:  964:		if (choice1)
branch  0 taken 50%
branch  1 taken 50%
        -:  965:        {
        1:  966:            bonus = 2;
        1:  967:        }
        1:  968:        else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 taken 0%
branch  1 taken 100%
        -:  969:        {
        -:  970:            //discard hand
    #####:  971:            while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  972:            {
    #####:  973:                discardCard(handPos, currentPlayer, state, 0);
        -:  974:            }
        -:  975:
        -:  976:            //draw 4
    #####:  977:            for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  978:            {
    #####:  979:                drawCard(currentPlayer, state);
    #####:  980:            }
        -:  981:
        -:  982:            //other players discard hand and redraw if hand size > 4
    #####:  983:            for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  984:            {
    #####:  985:                if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  986:                {
    #####:  987:                    if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  988:                    {
        -:  989:                        //discard hand
    #####:  990:                        while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  991:                        {
    #####:  992:                            discardCard(handPos, i, state, 0);
        -:  993:                        }
        -:  994:
        -:  995:                        //draw 4
    #####:  996:                        for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  997:                        {
    #####:  998:                            drawCard(i, state);
    #####:  999:                        }
    #####: 1000:                    }
    #####: 1001:                }
    #####: 1002:            }
        -: 1003:
    #####: 1004:        }
        2: 1005:        return 0;
        -: 1006:
        -: 1007:    case steward:
    #####: 1008:        if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1009:        {
        -: 1010:            //+2 cards
    #####: 1011:            drawCard(currentPlayer, state);
    #####: 1012:            drawCard(currentPlayer, state);
    #####: 1013:        }
    #####: 1014:        else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1015:        {
        -: 1016:            //+2 coins
    #####: 1017:            bonus += 2;
    #####: 1018:        }
        -: 1019:        else
        -: 1020:        {
        -: 1021:            //trash 2 cards in hand
    #####: 1022:            discardCard(choice2, currentPlayer, state, 1);
    #####: 1023:            discardCard(choice3, currentPlayer, state, 1);
        -: 1024:        }
        -: 1025:
        -: 1026:        //discard card from hand
    #####: 1027:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1028:        return 0;
        -: 1029:
        -: 1030:    case tribute:
       32: 1031:        if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
branch  0 taken 0%
branch  1 taken 100%
    #####: 1032:            if (state->deckCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####: 1033:                tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1034:                state->deckCount[nextPlayer]--;
    #####: 1035:            }
    #####: 1036:            else if (state->discardCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####: 1037:                tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1038:                state->discardCount[nextPlayer]--;
    #####: 1039:            }
        -: 1040:            else {
        -: 1041:                //No Card to Reveal
        -: 1042:                if (DEBUG) {
        -: 1043:                    printf("No cards to reveal\n");
        -: 1044:                }
        -: 1045:            }
    #####: 1046:        }
        -: 1047:
        -: 1048:        else {
       32: 1049:            if (state->deckCount[nextPlayer] == 0) {
branch  0 taken 0%
branch  1 taken 100%
    #####: 1050:                for (i = 0; i < state->discardCount[nextPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1051:                    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1052:                    state->deckCount[nextPlayer]++;
    #####: 1053:                    state->discard[nextPlayer][i] = -1;
    #####: 1054:                    state->discardCount[nextPlayer]--;
    #####: 1055:                }
        -: 1056:
    #####: 1057:                shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1058:            }
       32: 1059:            tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
       32: 1060:            state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
       32: 1061:            state->deckCount[nextPlayer]--;
       32: 1062:            tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
       32: 1063:            state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
       32: 1064:            state->deckCount[nextPlayer]--;
        -: 1065:        }
        -: 1066:
       32: 1067:        if (tributeRevealedCards[0] == tributeRevealedCards[1]) { //If we have a duplicate card, just drop one
branch  0 taken 19%
branch  1 taken 81%
        6: 1068:            state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
        6: 1069:            state->playedCardCount++;
        6: 1070:            tributeRevealedCards[1] = -1;
        6: 1071:        }
        -: 1072:
       96: 1073:        for (i = 0; i < 2; i ++) {
branch  0 taken 67%
branch  1 taken 33%
       64: 1074:            if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) { //Treasure cards
branch  0 taken 97%
branch  1 taken 3%
branch  2 taken 100%
branch  3 taken 0%
branch  4 taken 13%
branch  5 taken 87%
       10: 1075:                bonus += 2;
       10: 1076:            }
        -: 1077:
       54: 1078:            else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) { //Victory Card Found
branch  0 taken 96%
branch  1 taken 4%
branch  2 taken 100%
branch  3 taken 0%
branch  4 taken 100%
branch  5 taken 0%
branch  6 taken 100%
branch  7 taken 0%
branch  8 taken 29%
branch  9 taken 71%
       17: 1079:                drawCard(currentPlayer, state);
       17: 1080:                drawCard(currentPlayer, state);
       17: 1081:            }
        -: 1082:            // else if (tributeRevealedCards[i] == -1)
        -: 1083:            // {
        -: 1084:            //     if (DEBUG) 
        -: 1085:            //     {
        -: 1086:            //         printf("Both revealed cards are the same.\n");
        -: 1087:            //         break;
        -: 1088:            //     }
        -: 1089:            // }
        -: 1090:            else { //Action Card
       37: 1091:                state->numActions = state->numActions + 2;
        -: 1092:            }
       64: 1093:        }
        -: 1094:
       32: 1095:        return 0;
        -: 1096:
        -: 1097:    case ambassador:
        1: 1098:        j = 0;		//used to check if player has enough cards to discard
        -: 1099:
        1: 1100:        if (choice2 > 2 || choice2 < 0)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -: 1101:        {
    #####: 1102:            return -1;
        -: 1103:        }
        -: 1104:
        1: 1105:        if (choice1 == handPos)
branch  0 taken 100%
branch  1 taken 0%
        -: 1106:        {
        1: 1107:            return -1;
        -: 1108:        }
        -: 1109:
    #####: 1110:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1111:        {
    #####: 1112:            if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1113:            // if (i != handPos && state->hand[currentPlayer][i]  == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1114:            {
    #####: 1115:                j++;
    #####: 1116:            }
    #####: 1117:        }
    #####: 1118:        if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1119:        {
    #####: 1120:            return -1;
        -: 1121:        }
        -: 1122:
        -: 1123:        if (DEBUG)
        -: 1124:            printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1125:
        -: 1126:        //increase supply count for choosen card by amount being discarded
    #####: 1127:        state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1128:
        -: 1129:        //each other player gains a copy of revealed card
    #####: 1130:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1131:        {
    #####: 1132:            if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1133:            {
    #####: 1134:                gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1135:            }
    #####: 1136:        }
        -: 1137:
        -: 1138:        //discard played card from hand
    #####: 1139:        discardCard(handPos, currentPlayer, state, 0);
        -: 1140:
        -: 1141:        //trash copies of cards returned to supply
    #####: 1142:        for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1143:        {
    #####: 1144:            for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1145:            {
    #####: 1146:                if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1147:                {
    #####: 1148:                    discardCard(i, currentPlayer, state, 1);
    #####: 1149:                    break;
        -: 1150:                }
    #####: 1151:            }
    #####: 1152:        }
        -: 1153:
    #####: 1154:        return 0;
        -: 1155:
        -: 1156:    case cutpurse:
        -: 1157:
    #####: 1158:        updateCoins(currentPlayer, state, 2);
    #####: 1159:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1160:        {
    #####: 1161:            if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1162:            {
    #####: 1163:                for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1164:                {
    #####: 1165:                    if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1166:                    {
    #####: 1167:                        discardCard(j, i, state, 0);
    #####: 1168:                        break;
        -: 1169:                    }
    #####: 1170:                    if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1171:                    {
    #####: 1172:                        for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1173:                        {
        -: 1174:                            if (DEBUG)
        -: 1175:                                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1176:                        }
    #####: 1177:                        break;
        -: 1178:                    }
    #####: 1179:                }
        -: 1180:
    #####: 1181:            }
        -: 1182:
    #####: 1183:        }
        -: 1184:
        -: 1185:        //discard played card from hand
    #####: 1186:        discardCard(handPos, currentPlayer, state, 0);
        -: 1187:
    #####: 1188:        return 0;
        -: 1189:
        -: 1190:
        -: 1191:    case embargo:
        -: 1192:        //+2 Coins
    #####: 1193:        bonus = 2;
        -: 1194:
        -: 1195:        //see if selected pile is in play
    #####: 1196:        if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1197:        {
    #####: 1198:            return -1;
        -: 1199:        }
        -: 1200:
        -: 1201:        //add embargo token to selected supply pile
    #####: 1202:        state->embargoTokens[choice1]++;
        -: 1203:
        -: 1204:        //trash card
    #####: 1205:        discardCard(handPos, currentPlayer, state, 1);
    #####: 1206:        return 0;
        -: 1207:
        -: 1208:    case outpost:
        -: 1209:        //set outpost flag
    #####: 1210:        state->outpostPlayed++;
        -: 1211:
        -: 1212:        //discard card
    #####: 1213:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1214:        return 0;
        -: 1215:
        -: 1216:    case salvager:
        -: 1217:        //+1 buy
    #####: 1218:        state->numBuys++;
        -: 1219:
    #####: 1220:        if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1221:        {
        -: 1222:            //gain coins equal to trashed card
    #####: 1223:            bonus = getCost( handCard(choice1, state) );
        -: 1224:            //trash card
    #####: 1225:            discardCard(choice1, currentPlayer, state, 1);
    #####: 1226:        }
        -: 1227:
        -: 1228:        //discard card
    #####: 1229:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1230:        return 0;
        -: 1231:
        -: 1232:    case sea_hag:
    #####: 1233:        for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1234:            if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1235:                state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1236:                state->deckCount[i]--;
    #####: 1237:                state->discardCount[i]++;
    #####: 1238:                state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1239:            }
    #####: 1240:        }
    #####: 1241:        return 0;
        -: 1242:
        -: 1243:    case treasure_map:
        -: 1244:        //search hand for another treasure_map
    #####: 1245:        index = -1;
    #####: 1246:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1247:        {
    #####: 1248:            if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1249:            {
    #####: 1250:                index = i;
    #####: 1251:                break;
        -: 1252:            }
    #####: 1253:        }
    #####: 1254:        if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1255:        {
        -: 1256:            //trash both treasure cards
    #####: 1257:            discardCard(handPos, currentPlayer, state, 1);
    #####: 1258:            discardCard(index, currentPlayer, state, 1);
        -: 1259:
        -: 1260:            //gain 4 Gold cards
    #####: 1261:            for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1262:            {
    #####: 1263:                gainCard(gold, state, 1, currentPlayer);
    #####: 1264:            }
        -: 1265:
        -: 1266:            //return success
    #####: 1267:            return 1;
        -: 1268:        }
        -: 1269:
        -: 1270:        //no second treasure_map found in hand
    #####: 1271:        return -1;
        -: 1272:    }
        -: 1273:
    #####: 1274:    return -1;
       45: 1275:}
        -: 1276:
function discardCard called 14 returned 100% blocks executed 90%
       14: 1277:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1278:{
        -: 1279:
        -: 1280:    //if card is not trashed, added to Played pile
       14: 1281:    if (trashFlag < 1)
branch  0 taken 93%
branch  1 taken 7%
        -: 1282:    {
        -: 1283:        //add card to played pile
       13: 1284:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
       13: 1285:        state->playedCardCount++;
       13: 1286:    }
        -: 1287:
        -: 1288:    //set played card to -1
       14: 1289:    state->hand[currentPlayer][handPos] = -1;
        -: 1290:
        -: 1291:    //remove card from player's hand
       14: 1292:    if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 7%
branch  1 taken 93%
        -: 1293:    {
        -: 1294:        //reduce number of cards in hand
        1: 1295:        state->handCount[currentPlayer]--;
        1: 1296:    }
       13: 1297:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1298:    {
        -: 1299:        //reduce number of cards in hand
    #####: 1300:        state->handCount[currentPlayer]--;
    #####: 1301:    }
        -: 1302:    else
        -: 1303:    {
        -: 1304:        //replace discarded card with last card in hand
       13: 1305:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1306:        //set last card to -1
       13: 1307:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1308:        //reduce number of cards in hand
       13: 1309:        state->handCount[currentPlayer]--;
        -: 1310:    }
        -: 1311:
       14: 1312:    return 0;
        -: 1313:}
        -: 1314:
function gainCard called 3 returned 100% blocks executed 81%
        3: 1315:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1316:{
        -: 1317:    //Note: supplyPos is enum of choosen card
        -: 1318:
        -: 1319:    //check if supply pile is empty (0) or card is not used in game (-1)
        3: 1320:    if ( supplyCount(supplyPos, state) < 1 )
branch  0 taken 0%
branch  1 taken 100%
        -: 1321:    {
    #####: 1322:        return -1;
        -: 1323:    }
        -: 1324:
        -: 1325:    //added card for [whoseTurn] current player:
        -: 1326:    // toFlag = 0 : add to discard
        -: 1327:    // toFlag = 1 : add to deck
        -: 1328:    // toFlag = 2 : add to hand
        -: 1329:
        3: 1330:    if (toFlag == 1)
branch  0 taken 0%
branch  1 taken 100%
        -: 1331:    {
    #####: 1332:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1333:        state->deckCount[player]++;
    #####: 1334:    }
        3: 1335:    else if (toFlag == 2)
branch  0 taken 33%
branch  1 taken 67%
        -: 1336:    {
        1: 1337:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1338:        state->handCount[player]++;
        1: 1339:    }
        -: 1340:    else
        -: 1341:    {
        2: 1342:        state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1343:        state->discardCount[player]++;
        2: 1344:	state->hand[player][state->handCount[player]] = supplyPos;
        2: 1345:        state->handCount[player]++;
        -: 1346:    }
        -: 1347:
        -: 1348:    //decrease number in supply pile
        3: 1349:    state->supplyCount[supplyPos]--;
        -: 1350:
        3: 1351:    return 0;
        3: 1352:}
        -: 1353:
function updateCoins called 42 returned 100% blocks executed 85%
       42: 1354:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1355:{
        -: 1356:    int i;
        -: 1357:
        -: 1358:    //reset coin count
       42: 1359:    state->coins = 0;
        -: 1360:
        -: 1361:    //add coins for each Treasure card in player's hand
      252: 1362:    for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1363:    {
      210: 1364:        if (state->hand[player][i] == copper)
branch  0 taken 80%
branch  1 taken 20%
        -: 1365:        {
      168: 1366:            state->coins += 1;
      168: 1367:        }
       42: 1368:        else if (state->hand[player][i] == silver)
branch  0 taken 0%
branch  1 taken 100%
        -: 1369:        {
    #####: 1370:            state->coins += 2;
    #####: 1371:        }
       42: 1372:        else if (state->hand[player][i] == gold)
branch  0 taken 0%
branch  1 taken 100%
        -: 1373:        {
    #####: 1374:            state->coins += 3;
    #####: 1375:        }
      210: 1376:    }
        -: 1377:
        -: 1378:    //add bonus
       42: 1379:    state->coins += bonus;
        -: 1380:
       42: 1381:    return 0;
        -: 1382:}
        -: 1383:
        -: 1384:
        -: 1385://end of dominion.c
        -: 1386:
